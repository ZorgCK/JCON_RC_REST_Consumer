
package com.rapidclipse.jcon_rc_rest_consumer.ui;

import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Arrays;

import com.rapidclipse.framework.server.data.format.NumberFormatBuilder;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.rapidclipse.jcon_rc_rest_consumer.HasTitle;
import com.rapidclipse.jcon_rc_rest_consumer.dao.DAOBooks;
import com.rapidclipse.jcon_rc_rest_consumer.domain.Book;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.datepicker.DatePicker;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.BigDecimalField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.data.renderer.LocalDateRenderer;
import com.vaadin.flow.data.renderer.NumberRenderer;
import com.vaadin.flow.data.selection.SelectionEvent;
import com.vaadin.flow.data.selection.SelectionListener;
import com.vaadin.flow.router.Route;


@Route(value = "", layout = MainLayout.class)
public class ViewBooks extends HorizontalLayout implements HasTitle
{
	private Book book;
	
	public ViewBooks()
	{
		super();
		this.initUI();
		
		this.grid.setItems(DAOBooks.listBooks());
		this.filterComponent.connectWith(this.grid);
	}

	@Override
	public String getTitle()
	{
		return "Books";
	}

	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see SelectionListener#selectionChange(SelectionEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_selectionChange(final SelectionEvent<Grid<Book>, Book> event)
	{
		if(event.getFirstSelectedItem().isPresent())
		{
			this.book = event.getFirstSelectedItem().get();
			this.binder.readBean(this.book);
		}
		else
		{
			this.book = new Book();
			this.binder.readBean(this.book);
		}
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnUpdate}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnUpdate_onClick(final ClickEvent<Button> event)
	{
		if(this.book != null)
		{
			try
			{
				this.binder.writeBean(this.book);
				DAOBooks.updateBook(this.book);

				this.grid.getDataProvider().refreshItem(this.book);
			}
			catch(final ValidationException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnInsert}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnInsert_onClick(final ClickEvent<Button> event)
	{
		try
		{
			this.binder.writeBean(this.book);
			DAOBooks.insertBook(this.book);

			this.grid.setItems(DAOBooks.listBooks());
			this.filterComponent.connectWith(this.grid);
		}
		catch(final ValidationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btndelete}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btndelete_onClick(final ClickEvent<Button> event)
	{
		if(this.book != null)
		{
			DAOBooks.deleteBook(this.book);
			this.grid.setItems(DAOBooks.listBooks());
			this.filterComponent.connectWith(this.grid);
		}
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout2  = new VerticalLayout();
		this.filterComponent  = new FilterComponent();
		this.grid             = new Grid<>(Book.class, false);
		this.verticalLayout   = new VerticalLayout();
		this.form             = new FormLayout();
		this.formItem         = new FormItem();
		this.lblIsbn          = new Label();
		this.txtIsbn          = new TextField();
		this.formItem2        = new FormItem();
		this.lblName          = new Label();
		this.txtName          = new TextField();
		this.formItem3        = new FormItem();
		this.lblPrice         = new Label();
		this.bigdPrice        = new BigDecimalField();
		this.formItem4        = new FormItem();
		this.lblRelease       = new Label();
		this.dateRelease      = new DatePicker();
		this.binder           = new Binder<>();
		this.horizontalLayout = new HorizontalLayout();
		this.btndelete        = new Button();
		this.btnInsert        = new Button();
		this.btnUpdate        = new Button();

		this.setPadding(true);
		this.verticalLayout2.setPadding(false);
		this.grid.addColumn(Book::getIsbn).setKey("isbn").setHeader("ISBN").setSortable(true);
		this.grid.addColumn(Book::getName).setKey("name").setHeader("Name").setSortable(true);
		this.grid.addColumn(new NumberRenderer<>(Book::getPrice, NumberFormatBuilder.Currency().build(), ""))
			.setKey("price").setHeader("Preis").setSortable(true);
		this.grid
			.addColumn(
				new LocalDateRenderer<>(Book::getRelease, DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM), ""))
			.setKey("release").setHeader("Veröffentlichung").setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.verticalLayout.setPadding(false);
		this.form
			.setResponsiveSteps(new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP));
		this.lblIsbn.setText("ISBN");
		this.lblName.setText("Name");
		this.lblPrice.setText("Preis");
		this.lblRelease.setText("Veröffentlichung");
		this.btndelete.setText("Löschen");
		this.btndelete.addThemeVariants(ButtonVariant.LUMO_ERROR);
		this.btnInsert.setText("Einfügen");
		this.btnUpdate.setText("Speichern");

		this.binder.forField(this.txtIsbn).withNullRepresentation("").bind(Book::getIsbn, Book::setIsbn);
		this.binder.forField(this.txtName).withNullRepresentation("").bind(Book::getName, Book::setName);
		this.binder.forField(this.bigdPrice).bind(Book::getPrice, Book::setPrice);
		this.binder.forField(this.dateRelease).bind(Book::getRelease, Book::setRelease);

		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("isbn", "name"), Arrays.asList("isbn", "name", "price", "release")));

		this.filterComponent.setWidthFull();
		this.filterComponent.setHeight(null);
		this.grid.setSizeFull();
		this.verticalLayout2.add(this.filterComponent, this.grid);
		this.verticalLayout2.setFlexGrow(1.0, this.grid);
		this.lblIsbn.setSizeUndefined();
		this.lblIsbn.getElement().setAttribute("slot", "label");
		this.txtIsbn.setWidthFull();
		this.txtIsbn.setHeight(null);
		this.formItem.add(this.lblIsbn, this.txtIsbn);
		this.lblName.setSizeUndefined();
		this.lblName.getElement().setAttribute("slot", "label");
		this.txtName.setWidthFull();
		this.txtName.setHeight(null);
		this.formItem2.add(this.lblName, this.txtName);
		this.lblPrice.setSizeUndefined();
		this.lblPrice.getElement().setAttribute("slot", "label");
		this.bigdPrice.setWidthFull();
		this.bigdPrice.setHeight(null);
		this.formItem3.add(this.lblPrice, this.bigdPrice);
		this.lblRelease.setSizeUndefined();
		this.lblRelease.getElement().setAttribute("slot", "label");
		this.dateRelease.setWidthFull();
		this.dateRelease.setHeight(null);
		this.formItem4.add(this.lblRelease, this.dateRelease);
		this.form.add(this.formItem, this.formItem2, this.formItem3, this.formItem4);
		this.btndelete.setSizeUndefined();
		this.btnInsert.setSizeUndefined();
		this.btnUpdate.setSizeUndefined();
		this.horizontalLayout.add(this.btndelete, this.btnInsert, this.btnUpdate);
		this.horizontalLayout.setFlexGrow(1.0, this.btndelete);
		this.horizontalLayout.setFlexGrow(1.0, this.btnInsert);
		this.horizontalLayout.setFlexGrow(1.0, this.btnUpdate);
		this.form.setSizeUndefined();
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.verticalLayout.add(this.form, this.horizontalLayout);
		this.verticalLayout2.setWidth("800px");
		this.verticalLayout2.setHeightFull();
		this.verticalLayout.setWidth("200px");
		this.verticalLayout.setHeight(null);
		this.add(this.verticalLayout2, this.verticalLayout);
		this.setFlexGrow(1.0, this.verticalLayout2);
		this.setFlexGrow(1.0, this.verticalLayout);
		this.setSizeFull();

		this.grid.addSelectionListener(this::grid_selectionChange);
		this.btndelete.addClickListener(this::btndelete_onClick);
		this.btnInsert.addClickListener(this::btnInsert_onClick);
		this.btnUpdate.addClickListener(this::btnUpdate_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout       form;
	private Button           btndelete, btnInsert, btnUpdate;
	private DatePicker       dateRelease;
	private BigDecimalField  bigdPrice;
	private Binder<Book>     binder;
	private VerticalLayout   verticalLayout2, verticalLayout;
	private HorizontalLayout horizontalLayout;
	private Grid<Book>       grid;
	private Label            lblIsbn, lblName, lblPrice, lblRelease;
	private FilterComponent  filterComponent;
	private TextField        txtIsbn, txtName;
	private FormItem         formItem, formItem2, formItem3, formItem4;
	// </generated-code>

}
